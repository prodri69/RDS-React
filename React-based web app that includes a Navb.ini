React-based web app that includes a Navbar, Dashboard, Login system, and API integration. This project aligns with the job role requiring React, AWS, and PostgreSQL.
We build first app then login then dashboard 
/project-folder
│── /src
│   ├── /components
│   │   ├── Navbar.js
│   │   ├── Dashboard.js
│   │   ├── Login.js
│   │   ├── ProtectedRoute.js (optional)
│   ├── App.js
│   ├── index.js
│── /public
│── package.json
│── .env (for API credentials)
│── README.md


✅ Basic Features

1️⃣ Basic React Setup (npm create-react-app). ✅ Done
2️⃣ Navbar with Page Switching (useState). ✅ Done
3️⃣ Functional Dashboard & Login Components.

✅ Authentication

4️⃣ Login Form (Mock API for now, Cognito later).
5️⃣ Auth State (isAuthenticated) stored in App.js.
6️⃣ Conditional Rendering: Redirect to Dashboard if logged in.


✅ API & AWS Integration

7️⃣ Fetch API from useEffect() in Dashboard.js.
8️⃣ Mock API first → Then connect it to AWS RDS.
9️⃣ Use fetch() or axios to call API.
10️⃣ Secure API using IAM roles & authentication tokens.okth


✅ 1️⃣ App.js (Main Controller)
	•	Manages which page is shown (useState for routing).
	•	Holds Navbar + Switch logic for rendering components.
	•	Stores authentication state (isAuthenticated).
	•	Sends API calls to fetch database data.
    1️⃣ App.js Controls the Pages
	•	Holds state (currentPage, isAuthenticated).
	•	Navbar updates the page when buttons are clicked.
	•	Switch renders the correct component.


    ✅ 2️⃣ Navbar.js (Navigation)
	•	Displays buttons to switch between pages (Dashboard, Login).
	•	Uses setCurrentPage() to update the App.js state.
    

    ✅ 3️⃣ Dashboard.js (Main UI)
	•	Displays data fetched from AWS PostgreSQL.
	•	Calls a backend API (Node.js or AWS Lambda) to get data.
	•	Uses React hooks (useEffect, useState) for API calls.
3️⃣ Dashboard Fetches Data
	•	Uses useEffect() to fetch data when loaded.
	•	Calls API hosted on AWS Lambda or EC2.
	•	API queries PostgreSQL (AWS RDS) & returns data.
	•	Data is displayed dynamically in Dashboard.js.

    ✅ 4️⃣ Login.js (User Authentication)
	•	A form where users enter credentials.
	•	Sends credentials to API (mocked for now).
	•	If valid → updates isAuthenticated state in App.js.
	•	If invalid → shows an error message.
    2️⃣ Login System Handles Authentication
	•	Login.js collects user credentials.
	•	Sends credentials to mock API → API returns a success/failure response.
	•	If login is successful → App.js updates isAuthenticated.
	•	If failed → error message is displayed.



✅ 6️⃣ API Calls (AWS Integration)
	•	Backend API (Node.js/AWS Lambda) fetches data from AWS RDS.
	•	React fetches the API response & displays it in the dashboard.
	•	Authentication API (JWT or AWS Cognito) for login verification.